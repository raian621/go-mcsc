// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"context"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	APIKeyAuthScopes = "APIKeyAuth.Scopes"
)

// Defines values for ServerPropertiesDifficulty.
const (
	Easy     ServerPropertiesDifficulty = "easy"
	Hard     ServerPropertiesDifficulty = "hard"
	Medium   ServerPropertiesDifficulty = "medium"
	Peaceful ServerPropertiesDifficulty = "peaceful"
)

// Defines values for ServerPropertiesGamemode.
const (
	Adventure ServerPropertiesGamemode = "adventure"
	Creative  ServerPropertiesGamemode = "creative"
	Hardcore  ServerPropertiesGamemode = "hardcore"
	Spectator ServerPropertiesGamemode = "spectator"
	Survival  ServerPropertiesGamemode = "survival"
)

// Allowlist defines model for Allowlist.
type Allowlist = []PlayerInfo

// BannedIP defines model for BannedIP.
type BannedIP struct {
	Created string `json:"created"`
	Expires string `json:"expires"`
	Ip      string `json:"ip"`
	Reason  string `json:"reason"`
	Source  string `json:"source"`
}

// BannedIPList defines model for BannedIPList.
type BannedIPList = []BannedIP

// BannedPlayer defines model for BannedPlayer.
type BannedPlayer struct {
	Created string             `json:"created"`
	Expires string             `json:"expires"`
	Name    *string            `json:"name,omitempty"`
	Reason  string             `json:"reason"`
	Source  string             `json:"source"`
	Uuid    openapi_types.UUID `json:"uuid"`
}

// BannedPlayerList defines model for BannedPlayerList.
type BannedPlayerList = []BannedPlayer

// Message defines model for Message.
type Message = string

// PlayerInfo defines model for PlayerInfo.
type PlayerInfo struct {
	Name *string             `json:"name,omitempty"`
	Uuid *openapi_types.UUID `json:"uuid,omitempty"`
}

// ServerArguments defines model for ServerArguments.
type ServerArguments struct {
	BonusChest    *bool   `json:"bonusChest,omitempty"`
	Demo          *bool   `json:"demo,omitempty"`
	EraseCache    *bool   `json:"eraseCache,omitempty"`
	ForceUpgrade  *bool   `json:"forceUpgrade,omitempty"`
	MemoryMaxGB   *int    `json:"memoryMaxGB,omitempty"`
	MemoryStartGB *int    `json:"memoryStartGB,omitempty"`
	Port          *int    `json:"port,omitempty"`
	SafeMode      *bool   `json:"safeMode,omitempty"`
	ServerID      *string `json:"serverID,omitempty"`
	SinglePlayer  *string `json:"singlePlayer,omitempty"`
	Universe      *string `json:"universe,omitempty"`
	World         *string `json:"world,omitempty"`
}

// ServerOperator defines model for ServerOperator.
type ServerOperator struct {
	BypassesPlayerLimit bool               `json:"bypassesPlayerLimit"`
	Level               int                `json:"level"`
	Name                string             `json:"name"`
	Uuid                openapi_types.UUID `json:"uuid"`
}

// ServerOperatorList defines model for ServerOperatorList.
type ServerOperatorList = []ServerOperator

// ServerProperties defines model for ServerProperties.
type ServerProperties struct {
	MOTD                           *string                     `json:"MOTD,omitempty"`
	PVP                            *bool                       `json:"PVP,omitempty"`
	RCONPassword                   *string                     `json:"RCONPassword,omitempty"`
	RCONPort                       *int                        `json:"RCONPort,omitempty"`
	AcceptTransfers                *bool                       `json:"acceptTransfers,omitempty"`
	AllowFlight                    *bool                       `json:"allowFlight,omitempty"`
	AllowNether                    *bool                       `json:"allowNether,omitempty"`
	BroadcastConsoleToOps          *bool                       `json:"broadcastConsoleToOps,omitempty"`
	BroadcastRCONToOps             *bool                       `json:"broadcastRCONToOps,omitempty"`
	Difficulty                     *ServerPropertiesDifficulty `json:"difficulty,omitempty"`
	EnableCommandBlock             *bool                       `json:"enableCommandBlock,omitempty"`
	EnableJMXMonitoring            *bool                       `json:"enableJMXMonitoring,omitempty"`
	EnableQuery                    *bool                       `json:"enableQuery,omitempty"`
	EnableRCON                     *bool                       `json:"enableRCON,omitempty"`
	EnableStatus                   *bool                       `json:"enableStatus,omitempty"`
	EnforceSecureProfile           *bool                       `json:"enforceSecureProfile,omitempty"`
	EnforceWhitelist               *bool                       `json:"enforceWhitelist,omitempty"`
	EntityBroadcastRangePercentage *int                        `json:"entityBroadcastRangePercentage,omitempty"`
	ForceGamemode                  *bool                       `json:"forceGamemode,omitempty"`
	FunctionPermissionLevel        *int                        `json:"functionPermissionLevel,omitempty"`
	Gamemode                       *ServerPropertiesGamemode   `json:"gamemode,omitempty"`
	GenerateStructures             *bool                       `json:"generateStructures,omitempty"`
	GeneratorSettings              *string                     `json:"generatorSettings,omitempty"`
	Hardcore                       *bool                       `json:"hardcore,omitempty"`
	HideOnlinePlayers              *bool                       `json:"hideOnlinePlayers,omitempty"`
	InitialDisabledPacks           *string                     `json:"initialDisabledPacks,omitempty"`
	InitialEnabledPacks            *string                     `json:"initialEnabledPacks,omitempty"`
	LevelName                      *string                     `json:"levelName,omitempty"`
	LevelSeed                      *string                     `json:"levelSeed,omitempty"`
	LevelType                      *string                     `json:"levelType,omitempty"`
	LogIPs                         *bool                       `json:"logIPs,omitempty"`
	MaxChainedNeighborUpdates      *int                        `json:"maxChainedNeighborUpdates,omitempty"`
	MaxPlayers                     *int                        `json:"maxPlayers,omitempty"`
	MaxTickTime                    *int                        `json:"maxTickTime,omitempty"`
	MaxWorldSize                   *int                        `json:"maxWorldSize,omitempty"`
	NetworkCompressionThreshold    *int                        `json:"networkCompressionThreshold,omitempty"`
	OnlineMode                     *bool                       `json:"onlineMode,omitempty"`
	OpPermissionLevel              *int                        `json:"opPermissionLevel,omitempty"`
	PlayerIdleTimeout              *int                        `json:"playerIdleTimeout,omitempty"`
	PreventProxyConnections        *bool                       `json:"preventProxyConnections,omitempty"`
	PreviewsChat                   *bool                       `json:"previewsChat,omitempty"`
	QueryPort                      *int                        `json:"queryPort,omitempty"`
	RateLimit                      *int                        `json:"rateLimit,omitempty"`
	RegionFileCompression          *string                     `json:"regionFileCompression,omitempty"`
	RequireResourcePack            *bool                       `json:"requireResourcePack,omitempty"`
	ResourcePack                   *string                     `json:"resourcePack,omitempty"`
	ResourcePackID                 *string                     `json:"resourcePackID,omitempty"`
	ResourcePackPrompt             *string                     `json:"resourcePackPrompt,omitempty"`
	ResourcePackSHA1               *string                     `json:"resourcePackSHA1,omitempty"`
	ServerIP                       *string                     `json:"serverIP,omitempty"`
	ServerPort                     *int                        `json:"serverPort,omitempty"`
	SimulationDistance             *int                        `json:"simulationDistance,omitempty"`
	SnooperEnabled                 *bool                       `json:"snooperEnabled,omitempty"`
	SpawnAnimals                   *bool                       `json:"spawnAnimals,omitempty"`
	SpawnMonsters                  *bool                       `json:"spawnMonsters,omitempty"`
	SpawnNPCs                      *bool                       `json:"spawnNPCs,omitempty"`
	SpawnProtection                *int                        `json:"spawnProtection,omitempty"`
	SyncChunkWrites                *bool                       `json:"syncChunkWrites,omitempty"`
	TextFilteringConfig            *string                     `json:"textFilteringConfig,omitempty"`
	UseNativeTransport             *bool                       `json:"useNativeTransport,omitempty"`
	ViewDistance                   *int                        `json:"viewDistance,omitempty"`
	Whitelist                      *bool                       `json:"whitelist,omitempty"`
}

// ServerPropertiesDifficulty defines model for ServerProperties.Difficulty.
type ServerPropertiesDifficulty string

// ServerPropertiesGamemode defines model for ServerProperties.Gamemode.
type ServerPropertiesGamemode string

// AllowlistResponse defines model for AllowlistResponse.
type AllowlistResponse = Allowlist

// BannedIPListResponse defines model for BannedIPListResponse.
type BannedIPListResponse = BannedIPList

// BannedPlayerListResponse defines model for BannedPlayerListResponse.
type BannedPlayerListResponse = BannedPlayerList

// MessageResponse defines model for MessageResponse.
type MessageResponse = Message

// ServerOperatorListResponse defines model for ServerOperatorListResponse.
type ServerOperatorListResponse = ServerOperatorList

// AllowlistRequest defines model for AllowlistRequest.
type AllowlistRequest = Allowlist

// BannedIPListRequest defines model for BannedIPListRequest.
type BannedIPListRequest = BannedIPList

// BannedIPRequest defines model for BannedIPRequest.
type BannedIPRequest = BannedIP

// BannedPlayerListRequest defines model for BannedPlayerListRequest.
type BannedPlayerListRequest = BannedPlayerList

// BannedPlayerRequest defines model for BannedPlayerRequest.
type BannedPlayerRequest = BannedPlayer

// PlayerRequest defines model for PlayerRequest.
type PlayerRequest = PlayerInfo

// ServerOperatorListRequest defines model for ServerOperatorListRequest.
type ServerOperatorListRequest = ServerOperatorList

// ServerOperatorRequest defines model for ServerOperatorRequest.
type ServerOperatorRequest = ServerOperator

// UpdateArgsRequest defines model for UpdateArgsRequest.
type UpdateArgsRequest = ServerArguments

// UpdatePropertiesRequest defines model for UpdatePropertiesRequest.
type UpdatePropertiesRequest = ServerProperties

// PostPardonIpJSONBody defines parameters for PostPardonIp.
type PostPardonIpJSONBody struct {
	Ip string `json:"ip"`
}

// PostSetVersionParams defines parameters for PostSetVersion.
type PostSetVersionParams struct {
	Version *string `form:"version,omitempty" json:"version,omitempty"`
}

// PutAllowlistJSONRequestBody defines body for PutAllowlist for application/json ContentType.
type PutAllowlistJSONRequestBody = Allowlist

// PostAllowlistAddJSONRequestBody defines body for PostAllowlistAdd for application/json ContentType.
type PostAllowlistAddJSONRequestBody = PlayerInfo

// PostAllowlistRemoveJSONRequestBody defines body for PostAllowlistRemove for application/json ContentType.
type PostAllowlistRemoveJSONRequestBody = PlayerInfo

// PutArgsJSONRequestBody defines body for PutArgs for application/json ContentType.
type PutArgsJSONRequestBody = ServerArguments

// PostBanJSONRequestBody defines body for PostBan for application/json ContentType.
type PostBanJSONRequestBody = BannedPlayer

// PostBanIpJSONRequestBody defines body for PostBanIp for application/json ContentType.
type PostBanIpJSONRequestBody = BannedIP

// PutBannedIpsJSONRequestBody defines body for PutBannedIps for application/json ContentType.
type PutBannedIpsJSONRequestBody = BannedIPList

// PutBannedPlayersJSONRequestBody defines body for PutBannedPlayers for application/json ContentType.
type PutBannedPlayersJSONRequestBody = BannedPlayerList

// PostDeopJSONRequestBody defines body for PostDeop for application/json ContentType.
type PostDeopJSONRequestBody = PlayerInfo

// PostOpJSONRequestBody defines body for PostOp for application/json ContentType.
type PostOpJSONRequestBody = ServerOperator

// PutOpsJSONRequestBody defines body for PutOps for application/json ContentType.
type PutOpsJSONRequestBody = ServerOperatorList

// PostPardonJSONRequestBody defines body for PostPardon for application/json ContentType.
type PostPardonJSONRequestBody = PlayerInfo

// PostPardonIpJSONRequestBody defines body for PostPardonIp for application/json ContentType.
type PostPardonIpJSONRequestBody PostPardonIpJSONBody

// PutPropertiesJSONRequestBody defines body for PutProperties for application/json ContentType.
type PutPropertiesJSONRequestBody = ServerProperties

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /allowlist)
	GetAllowlist(w http.ResponseWriter, r *http.Request)

	// (PUT /allowlist)
	PutAllowlist(w http.ResponseWriter, r *http.Request)

	// (POST /allowlist/add)
	PostAllowlistAdd(w http.ResponseWriter, r *http.Request)

	// (POST /allowlist/remove)
	PostAllowlistRemove(w http.ResponseWriter, r *http.Request)

	// (PUT /args)
	PutArgs(w http.ResponseWriter, r *http.Request)

	// (GET /available-versions)
	GetAvailableVersions(w http.ResponseWriter, r *http.Request)

	// (POST /ban)
	PostBan(w http.ResponseWriter, r *http.Request)

	// (POST /ban-ip)
	PostBanIp(w http.ResponseWriter, r *http.Request)

	// (GET /banned-ips)
	GetBannedIps(w http.ResponseWriter, r *http.Request)

	// (PUT /banned-ips)
	PutBannedIps(w http.ResponseWriter, r *http.Request)

	// (GET /banned-players)
	GetBannedPlayers(w http.ResponseWriter, r *http.Request)

	// (PUT /banned-players)
	PutBannedPlayers(w http.ResponseWriter, r *http.Request)

	// (POST /deop)
	PostDeop(w http.ResponseWriter, r *http.Request)

	// (POST /op)
	PostOp(w http.ResponseWriter, r *http.Request)

	// (GET /ops)
	GetOps(w http.ResponseWriter, r *http.Request)

	// (PUT /ops)
	PutOps(w http.ResponseWriter, r *http.Request)

	// (POST /pardon)
	PostPardon(w http.ResponseWriter, r *http.Request)

	// (POST /pardon-ip)
	PostPardonIp(w http.ResponseWriter, r *http.Request)

	// (PUT /properties)
	PutProperties(w http.ResponseWriter, r *http.Request)

	// (POST /restart)
	PostRestart(w http.ResponseWriter, r *http.Request)

	// (POST /set-version)
	PostSetVersion(w http.ResponseWriter, r *http.Request, params PostSetVersionParams)

	// (POST /start)
	PostStart(w http.ResponseWriter, r *http.Request)

	// (POST /stop)
	PostStop(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (GET /allowlist)
func (_ Unimplemented) GetAllowlist(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /allowlist)
func (_ Unimplemented) PutAllowlist(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /allowlist/add)
func (_ Unimplemented) PostAllowlistAdd(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /allowlist/remove)
func (_ Unimplemented) PostAllowlistRemove(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /args)
func (_ Unimplemented) PutArgs(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /available-versions)
func (_ Unimplemented) GetAvailableVersions(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /ban)
func (_ Unimplemented) PostBan(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /ban-ip)
func (_ Unimplemented) PostBanIp(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /banned-ips)
func (_ Unimplemented) GetBannedIps(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /banned-ips)
func (_ Unimplemented) PutBannedIps(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /banned-players)
func (_ Unimplemented) GetBannedPlayers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /banned-players)
func (_ Unimplemented) PutBannedPlayers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /deop)
func (_ Unimplemented) PostDeop(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /op)
func (_ Unimplemented) PostOp(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /ops)
func (_ Unimplemented) GetOps(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /ops)
func (_ Unimplemented) PutOps(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /pardon)
func (_ Unimplemented) PostPardon(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /pardon-ip)
func (_ Unimplemented) PostPardonIp(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /properties)
func (_ Unimplemented) PutProperties(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /restart)
func (_ Unimplemented) PostRestart(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /set-version)
func (_ Unimplemented) PostSetVersion(w http.ResponseWriter, r *http.Request, params PostSetVersionParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /start)
func (_ Unimplemented) PostStart(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /stop)
func (_ Unimplemented) PostStop(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllowlist operation middleware
func (siw *ServerInterfaceWrapper) GetAllowlist(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, APIKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllowlist(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutAllowlist operation middleware
func (siw *ServerInterfaceWrapper) PutAllowlist(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, APIKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutAllowlist(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostAllowlistAdd operation middleware
func (siw *ServerInterfaceWrapper) PostAllowlistAdd(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, APIKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAllowlistAdd(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostAllowlistRemove operation middleware
func (siw *ServerInterfaceWrapper) PostAllowlistRemove(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, APIKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAllowlistRemove(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutArgs operation middleware
func (siw *ServerInterfaceWrapper) PutArgs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, APIKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutArgs(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAvailableVersions operation middleware
func (siw *ServerInterfaceWrapper) GetAvailableVersions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, APIKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAvailableVersions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostBan operation middleware
func (siw *ServerInterfaceWrapper) PostBan(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, APIKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostBan(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostBanIp operation middleware
func (siw *ServerInterfaceWrapper) PostBanIp(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, APIKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostBanIp(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetBannedIps operation middleware
func (siw *ServerInterfaceWrapper) GetBannedIps(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, APIKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBannedIps(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutBannedIps operation middleware
func (siw *ServerInterfaceWrapper) PutBannedIps(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, APIKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutBannedIps(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetBannedPlayers operation middleware
func (siw *ServerInterfaceWrapper) GetBannedPlayers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, APIKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBannedPlayers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutBannedPlayers operation middleware
func (siw *ServerInterfaceWrapper) PutBannedPlayers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, APIKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutBannedPlayers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostDeop operation middleware
func (siw *ServerInterfaceWrapper) PostDeop(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, APIKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDeop(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostOp operation middleware
func (siw *ServerInterfaceWrapper) PostOp(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, APIKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostOp(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOps operation middleware
func (siw *ServerInterfaceWrapper) GetOps(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, APIKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOps(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutOps operation middleware
func (siw *ServerInterfaceWrapper) PutOps(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, APIKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutOps(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostPardon operation middleware
func (siw *ServerInterfaceWrapper) PostPardon(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, APIKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPardon(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostPardonIp operation middleware
func (siw *ServerInterfaceWrapper) PostPardonIp(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, APIKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPardonIp(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutProperties operation middleware
func (siw *ServerInterfaceWrapper) PutProperties(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, APIKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutProperties(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostRestart operation middleware
func (siw *ServerInterfaceWrapper) PostRestart(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, APIKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRestart(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostSetVersion operation middleware
func (siw *ServerInterfaceWrapper) PostSetVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, APIKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostSetVersionParams

	// ------------- Optional query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, false, "version", r.URL.Query(), &params.Version)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSetVersion(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostStart operation middleware
func (siw *ServerInterfaceWrapper) PostStart(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, APIKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostStart(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostStop operation middleware
func (siw *ServerInterfaceWrapper) PostStop(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, APIKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostStop(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/allowlist", wrapper.GetAllowlist)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/allowlist", wrapper.PutAllowlist)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/allowlist/add", wrapper.PostAllowlistAdd)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/allowlist/remove", wrapper.PostAllowlistRemove)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/args", wrapper.PutArgs)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/available-versions", wrapper.GetAvailableVersions)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/ban", wrapper.PostBan)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/ban-ip", wrapper.PostBanIp)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/banned-ips", wrapper.GetBannedIps)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/banned-ips", wrapper.PutBannedIps)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/banned-players", wrapper.GetBannedPlayers)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/banned-players", wrapper.PutBannedPlayers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/deop", wrapper.PostDeop)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/op", wrapper.PostOp)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ops", wrapper.GetOps)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/ops", wrapper.PutOps)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pardon", wrapper.PostPardon)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pardon-ip", wrapper.PostPardonIp)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/properties", wrapper.PutProperties)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/restart", wrapper.PostRestart)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/set-version", wrapper.PostSetVersion)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/start", wrapper.PostStart)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/stop", wrapper.PostStop)
	})

	return r
}
